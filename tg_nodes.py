#!/usr/bin/python3
__author__ = 'ArkJzzz (arkjzzz@gmail.com)'


import os
import datetime
import logging
import pandas
import telegram
from telegram.ext import Updater
from telegram.ext import CommandHandler
from telegram.ext import Filters
from telegram.ext import MessageHandler
from telegram.ext import ConversationHandler
from dotenv import load_dotenv


logging.basicConfig(
    format='%(asctime)s %(name)s - %(funcName)s:%(lineno)d - %(message)s',
    datefmt='%Y-%b-%d %H:%M:%S (%Z)',
)
logger = logging.getLogger('tg_nodes')


WAITING_MESSAGE, WAITING_FILE = range(2)

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
NODES_FILE = os.path.join(BASE_DIR, 'nodes_file.xlsx')

ADVERTISING_IMAGE = 'advertising_image.jpeg'


def start(update, context):
    chat_id = update.effective_chat.id
    first_name = update.effective_chat.first_name

    welcome_message = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {first_name}!\n'\
        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —É–∑–ª—É '\
        '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã (–º–æ–∂–Ω–æ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, —Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω).'

    context.bot.send_message(chat_id, welcome_message)

    logger.info('start_handler: {}'.format(update.effective_chat.username))

    return WAITING_MESSAGE


def send_text_message(update, context):
    logger.debug('–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:')

    chat_id = update.effective_chat.id
    username = update.effective_chat.username
    text = update.message.text
    text = text.upper()

    logger.debug('–û—Ç {}, chat_id {}'.format(username, chat_id))
    logger.debug('–¢–µ–∫—Å—Ç: {}'.format(text))

    df = get_dataframe(NODES_FILE)
    matched_addresses = get_matched_addresses(df, text)
    logger.debug('–°–æ–≤–ø–∞–≤—à–∏–µ –∞–¥—Ä–µ—Å–∞: {}'.format(matched_addresses))

    if not matched_addresses:
        context.bot.send_message(chat_id, '–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        logger.debug('–û—Ç–≤–µ—Ç: –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n')
    else:
        for matched_address in matched_addresses:
            node = df.loc[df['–ê–î–†–ï–°'] == matched_address]
            answer = get_node_to_print(node)
            context.bot.send_message(chat_id, answer)
            logger.debug('–û—Ç–≤–µ—Ç: {}\n'.format(answer))

    days_to_ny(update, context)

    # advertising_message(update, context)

    return WAITING_MESSAGE


def get_dataframe(nodes_file):
    dataframe = pandas.read_excel(nodes_file, sheet_name='–ù–û–í–ê–Ø –ë–ê–ó–ê')
    addresses = dataframe['–ê–î–†–ï–°'].tolist()
    print('–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ –±–∞–∑–µ: {}'.format(dataframe.shape[0]))

    for address in addresses:
        dataframe = dataframe.replace(
            to_replace=address,
            value=str(address).upper()
        )

    return dataframe


def get_matched_addresses(df, input_phrase):
    addresses = df['–ê–î–†–ï–°'].tolist()

    matched_addresses = []
    for address in addresses:
        if input_phrase in address:
            matched_addresses.append(address)
    return matched_addresses


def get_node_to_print(node):
    node_values = node.values[0]
    node_to_print = (
        '–ê–¥—Ä–µ—Å: {}\n'
        'ID —É–∑–ª–∞: {}\n'
        '–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å: {}\n'
        '–¢–∏–ø: {}\n'
        '–î–æ–ø—É—Å–∫: {}\n'
        '–°–ø–∏—Å–æ–∫: {}\n'
        '–†–∞–∑–º–µ—â–µ–Ω–∏–µ: \n{}\n'
        '–ö–æ–Ω—Ç–∞–∫—Ç—ã: \n{}\n'
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: \n{}\n'
        .format(
            node_values[0],
            node_values[1],
            node_values[2],
            node_values[3],
            node_values[4],
            node_values[5],
            node_values[6],
            node_values[7],
            node_values[8],
        )
    )

    return node_to_print


def update_nodes_file(update, context):
    chat_id = update.effective_chat.id
    waiting_answer = '–æ–∂–∏–¥–∞—é —Ñ–∞–π–ª'
    context.bot.send_message(chat_id, waiting_answer)

    return WAITING_FILE


def save_document(update, context):
    logger.debug('save_document')
    chat_id = update.effective_chat.id
    new_nodes_file = update.message.effective_attachment.get_file()
    new_nodes_file.download('nodes_file.xlsx')
    save_document_answer = '—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω'
    context.bot.send_message(chat_id, save_document_answer)

    return WAITING_MESSAGE


def need_restart(update, context):
    chat_id = update.effective_chat.id
    waiting_answer = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start'
    context.bot.send_message(chat_id, waiting_answer)


def days_to_ny(update, context):
    chat_id = update.effective_chat.id

    now = datetime.datetime.now()
    then = datetime.datetime(now.year, 12, 31)
    delta = then - now

    if delta.days + 1 in [2, 3, 4]:
        day_improvise = '–¥–Ω—è'
    elif delta.days + 1 == 1:
        day_improvise = '–¥–µ–Ω—å'
    else:
        day_improvise = '–¥–Ω–µ–π'

    days_to_ny_message = '–î–æ –ù–æ–≤–≥–æ –ì–æ–¥–∞ üéÑüçæü•ÇüéÖ '\
        f'–æ—Å—Ç–∞–ª–æ—Å—å –ø–æ—Ç–µ—Ä–ø–µ—Ç—å {delta.days + 1} {day_improvise} ‚è∞'

    if delta.days < 32:
        context.bot.send_message(chat_id, days_to_ny_message)

    return WAITING_MESSAGE


# –ù–µ —É–¥–∞–ª—è—Ç—å, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–∫ —É–∑–ª–æ–≤
def advertising_message(update, context):
    chat_id = update.effective_chat.id

    with open(ADVERTISING_IMAGE, 'rb') as ad_image:
        context.bot.send_photo(
            chat_id=chat_id,
            photo=ad_image,
        )
    return WAITING_MESSAGE


def main():
    logger.setLevel(logging.DEBUG)

    load_dotenv()
    telegram_token = os.getenv("DEV_TELEGRAM_TOKEN")
    # telegram_token = os.getenv("TELEGRAM_TOKEN")

    updater = Updater(
        token=telegram_token,
        use_context=True,
    )

    mime_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'

    # do
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
        ],
        states={
            WAITING_MESSAGE: [
                MessageHandler(Filters.text, send_text_message),
                CommandHandler('update_nodes_file', update_nodes_file),
            ],
            WAITING_FILE: [
                MessageHandler(
                    Filters.document.mime_type(mime_type),
                    save_document
                )
            ]
        },
        fallbacks=[]
    )
    updater.dispatcher.add_handler(conv_handler)

    need_restart_handler = MessageHandler(Filters.text, need_restart)
    updater.dispatcher.add_handler(need_restart_handler)

    logger.debug('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª —Å –ë–î: {}'.format(NODES_FILE))

    try:
        logger.debug('–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞')
        updater.start_polling()

    except telegram.error.NetworkError:
        logger.error('–ù–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ telegram')
    except Exception as err:
        logger.error('–ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π:')
        logger.error(err)
        logger.debug(err, exc_info=True)

    updater.idle()
    logger.info('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')


if __name__ == "__main__":
    main()
